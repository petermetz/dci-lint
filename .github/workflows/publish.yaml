---
jobs:
  ghcr-container-image:
    env:
      DOCKERFILE_PATH: ./Dockerfile
      DOCKER_BUILDKIT: 1
      DOCKER_BUILD_DIR: ./
      IMAGE_NAME: dci-lint
    needs: npm-packages
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3.2.0
      - name: build-image
        run: docker build $DOCKER_BUILD_DIR --file $DOCKERFILE_PATH --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"
      - name: ghcr-authentication
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: push-image
        run: |
          SHORTHASH=$(git rev-parse --short "$GITHUB_SHA")
          TODAYS_DATE="$(date +%F)"
          DOCKER_TAG="$TODAYS_DATE-$SHORTHASH"
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Do not use the `latest` tag at all, tag with date + git short hash if there is no git tag
          [ "$VERSION" == "main" ] && VERSION=$DOCKER_TAG
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
  npm-packages:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3.2.0
      - run: git fetch --unshallow --prune
      - uses: actions/setup-node@v3.5.1
        with:
          always-auth: true
          node-version: 18.12.1
          registry-url: https://registry.npmjs.org
      - name: install-dependencies
        run: yarn install --immutable
      - name: build-sources
        run: yarn build
      - env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        name: lerna-publish
        run: |
          npm whoami
          yarn lerna publish from-git --yes --loglevel=debug
name: publish
'on':
  push:
    # Publish `v1.2.3` tags as releases.
    tags:
      - v*