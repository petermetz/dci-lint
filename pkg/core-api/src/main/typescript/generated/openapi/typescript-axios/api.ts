/* tslint:disable */
/* eslint-disable */
/**
 * DCI Lint Core API
 * Contains/describes the core API types for DCI Lint.
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface LintGitRepoRequest
 */
export interface LintGitRepoRequest {
    /**
     * 
     * @type {string}
     * @memberof LintGitRepoRequest
     */
    cloneUrl: string;
    /**
     * CLI arguments passed in to git fetch after a successful clone. If empty or omitted no fetch will be executed after the clone.
     * @type {Array<string>}
     * @memberof LintGitRepoRequest
     */
    fetchArgs?: Array<string>;
    /**
     * CLI arguments passed in to git checkout after a successful clone. If empty or omitted no checkout will be executed after the clone.
     * @type {Array<string>}
     * @memberof LintGitRepoRequest
     */
    checkoutArgs?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof LintGitRepoRequest
     */
    configDefaultsUrl?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof LintGitRepoRequest
     */
    targetPhrasePatterns: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof LintGitRepoRequest
     */
    includeFilePatterns?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof LintGitRepoRequest
     */
    excludeFilePatterns?: Array<string>;
}
/**
 * 
 * @export
 * @interface LintGitRepoResponse
 */
export interface LintGitRepoResponse {
    /**
     * 
     * @type {string}
     * @memberof LintGitRepoResponse
     */
    outcome: LintGitRepoResponseOutcomeEnum;
    /**
     * 
     * @type {Array<LinterError>}
     * @memberof LintGitRepoResponse
     */
    linterErrors: Array<LinterError>;
    /**
     * 
     * @type {string}
     * @memberof LintGitRepoResponse
     */
    cloneUrl: string;
}

/**
    * @export
    * @enum {string}
    */
export enum LintGitRepoResponseOutcomeEnum {
    Success = 'dci-lint.lint-git-repo-response.outcome.SUCCESS',
    Inconclusive = 'dci-lint.lint-git-repo-response.outcome.INCONCLUSIVE',
    Failure = 'dci-lint.lint-git-repo-response.outcome.FAILURE'
}

/**
 * 
 * @export
 * @interface LintGithubOrgRequest
 */
export interface LintGithubOrgRequest {
    /**
     * 
     * @type {string}
     * @memberof LintGithubOrgRequest
     */
    organizationName: string;
}
/**
 * 
 * @export
 * @interface LintGithubOrgResponse
 */
export interface LintGithubOrgResponse {
    /**
     * 
     * @type {string}
     * @memberof LintGithubOrgResponse
     */
    outcome: LintGithubOrgResponseOutcomeEnum;
    /**
     * 
     * @type {string}
     * @memberof LintGithubOrgResponse
     */
    organizationName: string;
}

/**
    * @export
    * @enum {string}
    */
export enum LintGithubOrgResponseOutcomeEnum {
    Success = 'dci-lint.lint-github-org-response.outcome.SUCCESS',
    Inconclusive = 'dci-lint.lint-github-org-response.outcome.INCONCLUSIVE',
    Failure = 'dci-lint.lint-github-org-response.outcome.FAILURE'
}

/**
 * 
 * @export
 * @interface LinterError
 */
export interface LinterError {
    /**
     * 
     * @type {string}
     * @memberof LinterError
     */
    file: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof LinterError
     */
    targetPhrasePatterns: Array<string>;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Lints a Git repository
         * @param {LintGitRepoRequest} [lintGitRepoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lintGitRepoV1: async (lintGitRepoRequest?: LintGitRepoRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/lint-git-repo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(lintGitRepoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lints a Github organization
         * @param {LintGithubOrgRequest} [lintGithubOrgRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lintGithubOrgV1: async (lintGithubOrgRequest?: LintGithubOrgRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/lint-github-org`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(lintGithubOrgRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Lints a Git repository
         * @param {LintGitRepoRequest} [lintGitRepoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lintGitRepoV1(lintGitRepoRequest?: LintGitRepoRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LintGitRepoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lintGitRepoV1(lintGitRepoRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Lints a Github organization
         * @param {LintGithubOrgRequest} [lintGithubOrgRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lintGithubOrgV1(lintGithubOrgRequest?: LintGithubOrgRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LintGithubOrgResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lintGithubOrgV1(lintGithubOrgRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Lints a Git repository
         * @param {LintGitRepoRequest} [lintGitRepoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lintGitRepoV1(lintGitRepoRequest?: LintGitRepoRequest, options?: any): AxiosPromise<LintGitRepoResponse> {
            return localVarFp.lintGitRepoV1(lintGitRepoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lints a Github organization
         * @param {LintGithubOrgRequest} [lintGithubOrgRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lintGithubOrgV1(lintGithubOrgRequest?: LintGithubOrgRequest, options?: any): AxiosPromise<LintGithubOrgResponse> {
            return localVarFp.lintGithubOrgV1(lintGithubOrgRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Lints a Git repository
     * @param {LintGitRepoRequest} [lintGitRepoRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public lintGitRepoV1(lintGitRepoRequest?: LintGitRepoRequest, options?: any) {
        return DefaultApiFp(this.configuration).lintGitRepoV1(lintGitRepoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lints a Github organization
     * @param {LintGithubOrgRequest} [lintGithubOrgRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public lintGithubOrgV1(lintGithubOrgRequest?: LintGithubOrgRequest, options?: any) {
        return DefaultApiFp(this.configuration).lintGithubOrgV1(lintGithubOrgRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


